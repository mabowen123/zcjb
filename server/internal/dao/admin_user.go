// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"context"
	"github.com/gogf/gf/v2/frame/g"
	"server/internal/consts/redis"
	"server/internal/consts/redis/user"
	"server/internal/dao/internal"
	"server/internal/model/entity"
)

// internalAdminUserDao is an internal type for wrapping the internal DAO implementation.
type internalAdminUserDao = *internal.AdminUserDao

// adminUserDao is the data access object for the table admin_user.
// You can define custom methods on it to extend its functionality as needed.
type adminUserDao struct {
	internalAdminUserDao
}

var (
	// AdminUser is a globally accessible object for table admin_user operations.
	AdminUser = adminUserDao{
		internal.NewAdminUserDao(),
	}
)

// Add your custom methods and functionality below.
func (adminUserDao) GetUserByUsernameAndPassword(ctx context.Context, username string, password string) (*entity.AdminUser, error) {
	userInfo := new(entity.AdminUser)

	err := AdminUser.Ctx(ctx).Fields("id,username").
		Where("username", username).
		Where("password", password).
		Scan(userInfo)

	return userInfo, err
}
func (adminUserDao) RSetExToken(ctx context.Context, id uint, token string, ttl int64) bool {
	err := g.Redis().SetEX(ctx, redis.GetKey(user.TOKEN, id), token, ttl)
	return err == nil
}

func (adminUserDao) RDelToken(ctx context.Context, id uint) bool {
	_, err := g.Redis().Del(ctx, redis.GetKey(user.TOKEN, id))
	return err == nil
}
